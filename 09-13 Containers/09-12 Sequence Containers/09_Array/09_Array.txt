An array is an array (hence the name) of variables or elements which have the same variable type. An array is static, and has a 
reserved memory location for all the elements upon declaration, which is one of the main differences between an Array and other
element containers. Each value in an array has its own unique identifier in memory and accessor in the array. Arrays start from 
0, so be careful when you create and access elements in an array. In a single array, only one variable type is allowed, and that
is the one that is assigned to the array at declaration. Lets say we had an integer array given a length of 3, it would be able 
to fit 3 different int values. Declaring and defining an array can be done in many ways. To declare an array using C++ built-in
arrays, you use the format:

varType arrayName[elementsAmount];

To declare and define using C++ built-in arrays, there are 3 formats you can use.

1. varType arrayName[elementsAmount] = { element#1, element#2 ... element#elementsAmount};
2. varType arrayName[elementsAmount] = { element#1, element#2, ... element#anyNumberBelowElementsAmount };
3. varType arrayName[elementsAmount] = {};

In the first one, you declare the array, but to define, you but the equals sign, and in curly brackets list the elements in the
array. The first one will be the first in the array, second one second, on and on until you reach the element number that equals
the number in the square brackets []. This will fill the entire array with the values you assign to the elements.

In the second one, you declare the array, and define any amount of elements that are less than the number in the [], but more
than 1. The first will equal the first, the second the second in the array, on and on until you stop assigning elements. This
will fill the array with the amount of elements you define, and places the default entry for the ones you do not define. In C++,
the default is 0.

In the third one, you are doing the same exact thing as just declaring it, but with 4 extra characters. Quite unnecessary, but
whatever floats your boat. All elements are assigned the value 0.

To define a specific value, you need to access the specific element in the array, and then assign the value to it. To do this,
there is one good format:

arrayName[elementNumeberToChange] = valueToAssign;

Do keep in mind, an array starts with the number 0 when you are accessing its elements. This way, if you want to access the
fourth element, you would access it with the accessor [3]. For the first element, the accessor is [0], so on, so forth.

To access an element in the array, you call the array, and the element you want to access. This is a very similar process to 
assigning a value. The format is:

arrayName[elementNumberToAccess];

There is a second way to make arrays which are only accessible if you use the #include <array> header. This gives you access
to the array class. Declaring and defining is similar to the normal way, but to some people, this way is more structured, so
they use it. The format for this version to declare is:

std::array<varType, elementsAmount> arrayName;

To declare and define using the <array> style, there are again 3 formats you can use, very similar to the C++ built-in style.

1. std::array<varType, elementsAmount> arrayName = { element#1, element#2, ... element#elementsAmount };
2. std::array<varType, elementAmount> arrayName = { element#1, element#2, ... element#anyNumberBelowElementsAmount };
3. std::array<varYpe, elementAmount> = {};

Assigning and accessing elements in this type of array is the same as C++ built-in style. The only things that change are the
declaring and defining formats.

Next come all the member functions of the <array> header. All libraries in C++ have their own member functions, and those are 
also parts of classes, something you will learn about rather soon. In the <array> header, we have 18 member functions, and these
are all only usable on the std::array<>{} type of array. I will go over each one of them, but not in too much detail as to not
bore you.


1. std::array::at();

This function checks whether some value or element is in the range of the array. It returns the element at the requested position
in the array. It requires a parameter being the position of the element in the array. Format:

arrayName.at(position);


2. std::array::back();

This function accesses the last element in the array, simple. Returns a reference to the element. Requires no parameters. Format:

arrayName.back();


3. std::array::begin();

This function returns an value that points to the first element in the array. Basically, it returns the value of the first element
in the array, an iterator to the beginning of the container. Requires no parameters. If using this to assign a value to a variable,
use variable type "auto". The compiler will automatically set the variable type to whatever is first defined in it. Format:

arrayName.begin();


4. std::array::cbegin();

This function returns a constant value that points to the first element in the array. This is the same as std::array::begin, but
instead of returning a constant or non-constant value, returns only a constant value. This just means you can't use this reference to
redefine a variable, even if the variable itself is not assigned as a constant variable. Requires no parameters. If using this to 
assign a value to a variable, use variable type "auto". The compiler will automatically set the variable type to whatever is
first defined in it. Format:

arrayName.cbegin();


5. std::array::cend();

This function returns a constant value that points to the element immediately after the last array value. If your array is 5 
elements large, it will return the computer's version of a 6. Like begin() and cbegin(), this is almost the same as end(), it just
guarrantees a constant value to be returned. Requires no parameters. If using this to assign a value to a variable, use variable
type "auto". The compiler will automatically set the variable type to whatever isfirst defined in it. Format:

arrayName.cend();


6. std::array::crbegin();

This function returns a constant value that points to the reverse of the beginning (basically, the end). The reason this is used at
all is because end() points to the element AFTER the end, whilst this one points at the last element. Since it is a constant-reverse
begin function, it returns a constant value. Requires no parameters. If using this to assign a value to a variable, use variable type
"auto". The compiler will automatically set the variable type to whatever is first defined in it. Format:

arrayName.crbegin();


7. std::array::crend();

This function returns a constant value that points to the reverse of the end (the beginning). Since it is a constant-reverse begin
function, it returns a constant value. Requires no parameters. If using this to assign a value to a variable, use variable type "auto".
The compiler will automatically set the variable type to whatever is first defined in it. Format:

arrayName.crend();


8. std::array::data();

This function returns a pointer to the first element of an array. Due to how arrays are stored in memory, a pointer that is returned can 
be offset by some amount to retrieve a different element in the array. If the array is a const array, it will return a const value, otherwise
it is normal. It requires no parameters. Format:

arrayName.data();


9. std::array::empty();

This function returns a boolean value based upon whether the array is empty or not (has 0 space or not). The function is purely used for
comparison, it does not edit any of the values or properties of the elements or array. If the array has a size of 0, it will return true (1),
otherwise, it returns false (0) in the form of a constant expression (constexpr). Format:

arrayName.empty();


10. std::array::end();

This function acts like cend(), but the result isn't always constant. That relatively it. There are no parameters. Format:

arrayName.end();


11. std::array::fill();

This function sets all the values in the array to the value that is input into the function parameters. The input value must have the same 
type as the array, or else the entire system will crash either during compilation, or execution. There is no return for this function.
Format:

arrayName.fill(valueToFillArrayWith);


12. std::array::front();

This function is used to return a direct reference to the first element in the array. It is different from std::array::begin because
std::array::front returns a direct reference, while std::array::begin returns an iterator. If the array is declared const, this function
returns a const reference. Format:

arrayName.front();


13. std::array::max_size();

This function is very similar to std::array::size(), but returns a constant expression (constexpr) with the value of the maximum amount
of elements that the array can hold. It is returned in the form of an unsigned int. .size() and .max_size() will always return the same 
value. Format:

arrayName.max_size();


14. std::array::operator[];

This function is the one that is used most often. It is very similar to the .at() function, but this one doesn't check the boundaries of 
the array as it accesses the element. The .at() function will throw an error/exception if the number you input is outside the boundaries
of the array, but this one will just call it false. This function takes one parameter in the form of a number, more specifically, an unsigned
integral. The function returns a reference or a constant reference, based on what the array is (const/not-const respectively). Do remember
that an array's first element has a position value of 0, like in most other programming languages. Format:

arrayName[positionValue];


15. std::array::rbegin();

This function is just like .crbegin(), but does not guarrantee a constant to return. This, like the rest of non-const functions will return
a constant iterator/reference when the array is such, but no other time. It will return the reverse iterator to the reverse beginning (end) \
of the array. There are no parameters for this function. Format:

arrayName.rbegin();


16. std::array::rend();

This function is the end equivalent of the rbegin function. It too returns the reverse iterator, but this time to the reverse end (beginning)
of the array. Again, there are no parameters. Format:

arrayName.rend();


17. std::array::size();

This is a function used quite often to assign a variable to the range of the array in a loop, the .size() function. It returns the size of the
array in the form of a compile-time constant expression (constexpr). There are no parameters for this function, either. Format:

arrayName.size();


18. std::array::swap();

This is the last member function alphabetically in the <array> header. As you can probably guess, it swaps the contents of 2 arrays,
with each operation being linear and individual. For this function to run smoothly, the sizes of the arrays have to be the same, the
type has to be the same, and they both must not be const. If these criteria are not fulfilled, errors will flood your system. Format:

arrayName1.swap(arrayName2);


In the .h file, we see a new header line, #include <array>. Forget about #include <cstring>, there is only one  function used from it and 
is used only once. We learned in a previous lesson that #include includes a library and gives access to all the functions, classes, enums,
etc of that library. In the .h file, I made a function for each of the member functions that are included in <array>, each with their own 
arrays, variables, and methods. In this file is the explanation behind the member function, and in the .h file is all the corresponding code.
In the .cpp file, we call all the functions, and that's basically it.